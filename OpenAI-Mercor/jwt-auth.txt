Due to increasing users and a lot of suspicious requests, we need to refine our authentication mechanism and implement something more robust. The current system has basic authentication only. 

In the 19-auth-jwt sample project, extend the current JWT authentication system to implement refresh token support.

The following needs to be implemented specifically:

1. Add a new POST endpoint in auth controller: /auth/refresh that issues a new access_token in the response when a valid refresh token in passes in the request.
2. Implement a new RefreshTokenDto class used as a param validator in @Req endpoint in previous step.
3. For now, use a simple in-memory store solution to store refresh tokens by users. 
4. Update the existing login endpoint to return access token, refresh token and access token expiry time. 
5. Create a new constants.ts file in auth and add the following constants: 
    1. ACCESS_TOKEN_EXPIRATION=’1h’
    2. JWT_ACCESS_SECRET=process.env.JWT_ACCESS_SECRET
    3. REFRESH_TOKEN_EXPIRATION=’7d’
    4. JWT_REFRESH_SECRET=process.env.JWT_REFRESH_SECRET
6. Use the above values to generate jwt tokens (access, refresh)
7. Write unit test for refresh token logic

Rationale:

Adding support for JWT refresh touches on auth security, state management, and testing. While it's common in production APIs, it requires knowledge of token strategies, secure token storage, and integration with NestJS guards and services. It’s a very realistic task that a junior or mid-level engineer would be expected to handle but may struggle with without solid architectural understanding of NestJS and JWT. 

Feature request

20h

1000USD